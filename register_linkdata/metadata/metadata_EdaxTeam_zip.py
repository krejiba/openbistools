import zipfile
import xml.etree.ElementTree as ET


def get_metadata(filename : str) -> dict:
    """extract metadata from a zip file generated by Edax TEAM

    Args:
        filename (str): (full) path to the EDAX zip file from which the metadata are to be extracted

    Returns:
        dict: metadata dictionary correspoinding to openBIS custom object type "EBSD_EXP_DATA"
    """
    metadata = {'project_name': [], 'sample_name' : [], 'area_per_sample' : []}
    zf = zipfile.ZipFile(filename, "r")
    sourceFileName = ""
    for name in zf.namelist():
        if(not(name.startswith("__")) and name.endswith("sourceFilesList.xml")):
            sourceFileName = name
            break

    f = zf.open(sourceFileName)
    tree = ET.parse(f)
    root = tree.getroot()
    for child in root:
        filedata = child.text.split("\\")
        if len(filedata)==11:
            metadata['project_name'].append(filedata[7])
            metadata['sample_name'].append(filedata[8])
            metadata['area_per_sample'].append(filedata[9])
    
    #note Java serialisation in openBIS does not allow for list, etc, only return first element
    metadata['project_name'] = list(set(metadata['project_name']))[0]
    metadata['num_samples'] = len(list(set(metadata['sample_name'])))
    metadata['sample_name'] = list(set(metadata['sample_name']))[0]
    metadata['area_per_sample']=list(set(metadata['area_per_sample']))
    metadata['num_areas'] = len(metadata['area_per_sample'])
    metadata.pop('area_per_sample')                                           
    
    return metadata



